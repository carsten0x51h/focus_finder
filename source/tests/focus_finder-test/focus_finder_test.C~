#include <boost/test/unit_test.hpp>

#include "libindiclientpp/indi_device.hpp"
#include "libindiclientpp/indi_client.hpp"
#include "libindiclientpp/indi_type_printer.hpp"
#include "libindiclientpp/vec_prop.hpp"

#include "indi_test_server.hpp"

#include <iostream>
#include <memory>

using namespace libindiclientpp;


BOOST_GLOBAL_FIXTURE( StartIndiTestServer );


BOOST_AUTO_TEST_SUITE(indi_client_tests)

BOOST_AUTO_TEST_CASE(set_and_get_host_info_from_client_test)
{
  const std::string hostname = "localhost"; 
  const unsigned int port = 1234;
  
  IndiClientT indiClient(hostname, port);
  
  BOOST_CHECK_EQUAL(indiClient.getHostName(), hostname);
  BOOST_CHECK_EQUAL(indiClient.getPort(), port);
}



BOOST_AUTO_TEST_CASE(connect_throw_test)
{
  IndiClientT indiClient("does_not_exist__", 12345);
  BOOST_CHECK_THROW(indiClient.connect(), IndiServerConnectionExcT);
}



/**
 * For this purpose an INDI server instance is created.
 * Actually this is already an integration-test... but for now we put it here...
 */
BOOST_AUTO_TEST_CASE(connect_disconnect_reconnect_client_test)
{
  // Create a client instance
  IndiClientT indiClient(sHostname, sPort);
  indiClient.connect();

  BOOST_CHECK_EQUAL(indiClient.isConnected(), true);

  indiClient.disconnect();
  BOOST_CHECK_EQUAL(indiClient.isConnected(), false);
}



BOOST_AUTO_TEST_CASE(indi_client_get_devices_test)
{
  std::shared_ptr<IndiClientT> indiClient = std::make_shared<IndiClientT>(sHostname, sPort);
  indiClient->connect();
  
  sleep(sWaitForDevicesTimeSec); // Wait a moment for devices...
  
  auto devices = indiClient->getDevices();
  BOOST_CHECK_EQUAL(devices.size(), 1);

  shared_ptr<IndiDeviceT> myDevice = devices.at(0);
  BOOST_CHECK_EQUAL(myDevice->getName(), sTestDeviceName);
  
  indiClient->disconnect();
}

BOOST_AUTO_TEST_CASE(indi_client_reconnect_device_consistency_test)
{
  // TODO: Why is normal on stack variant no longer possible????: IndiClientT indiClient(sHostname, sPort);
  std::shared_ptr<IndiClientT> indiClient = std::make_shared<IndiClientT>(sHostname, sPort);

  indiClient->connect();
  indiClient->syncDispatch();

  sleep(sWaitForDevicesTimeSec); // Wait a moment for devices...

  auto devices = indiClient->getDevices();
  BOOST_CHECK_EQUAL(devices.size(), 1);
  BOOST_CHECK_EQUAL(devices.at(0)->getName(), sTestDeviceName);

  indiClient->disconnect();
  indiClient->syncDispatch();
  
  // Reconnect
  indiClient->connect();
  indiClient->syncDispatch();
  
  sleep(sWaitForDevicesTimeSec); // Wait a moment for devices...

  devices = indiClient->getDevices();
  BOOST_CHECK_EQUAL(devices.size(), 1);
  BOOST_CHECK_EQUAL(devices.at(0)->getName(), sTestDeviceName);

  indiClient->disconnect();
}



BOOST_AUTO_TEST_CASE(indi_client_find_device_test) {
  // TODO:
}



BOOST_AUTO_TEST_CASE(indi_client_server_connect_disconnect_handler_test)
{
  bool connectedTest = false;
  int exitCode = -2;
  int numHandlerCalls = 0;
  
  // TODO: Why is normal on stack variant no longer possible????: IndiClientT indiClient(sHostname, sPort);
  //IndiClientT indiClient(sHostname, sPort);
  std::shared_ptr<IndiClientT> indiClient = std::make_shared<IndiClientT>(sHostname, sPort);

  auto serverConnectHandler = [& numHandlerCalls, & connectedTest, & exitCode](bool inServerConnected, int inExitCode) {
    connectedTest = inServerConnected;
    exitCode = inExitCode;
    ++numHandlerCalls;
  };
  
  boost::signals2::connection conn = indiClient->addServerConnectionStatusChangedListener(serverConnectHandler);
  
  // Connect
  indiClient->connect();
  indiClient->syncDispatch();
  BOOST_CHECK_EQUAL(connectedTest, true);
  BOOST_CHECK_EQUAL(exitCode, -1 /* not applicable*/);

  sleep(sWaitForDevicesTimeSec); // Wait a moment for devices...

  // Disconnect
  indiClient->disconnect();
  indiClient->syncDispatch();
  BOOST_CHECK_EQUAL(connectedTest, false);
  BOOST_CHECK_EQUAL(exitCode, 0);

  // Check remove
  //indiClient.removeServerConnectionStatusChangedListener(& serverConnectHandler); // TODO: Does not work...
  indiClient->removeServerConnectionStatusChangedListener(conn);

  // Connect
  indiClient->connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  
  indiClient->syncDispatch();
  indiClient->disconnect();

  BOOST_CHECK_EQUAL(numHandlerCalls, 2);
}


BOOST_AUTO_TEST_CASE(indi_client_device_new_removed_handlers_test)
{
  // TODO: Why is normal on stack variant no longer possible????: IndiClientT indiClient(sHostname, sPort);
  //IndiClientT indiClient(sHostname, sPort);
  std::shared_ptr<IndiClientT> indiClient = std::make_shared<IndiClientT>(sHostname, sPort);
  
  int numDeviceNewHandlerCalls = 0, numDeviceRemovedHandlerCalls = 0;
  
  auto deviceNewHandler = [& numDeviceNewHandlerCalls](shared_ptr<IndiDeviceT> inDevice) {
    BOOST_CHECK_EQUAL(inDevice->getName(), sTestDeviceName);
    ++numDeviceNewHandlerCalls;
  };
  
  auto deviceRemovedHandler = [& numDeviceRemovedHandlerCalls](shared_ptr<IndiDeviceT> inDevice) {
    BOOST_CHECK_EQUAL(inDevice->getName(), sTestDeviceName);
    ++numDeviceRemovedHandlerCalls;
  };

  boost::signals2::connection connNew = indiClient->addDeviceNewListener(deviceNewHandler);
  boost::signals2::connection connRemoved = indiClient->addDeviceRemovedListener(deviceRemovedHandler);
  
  indiClient->connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  indiClient->syncDispatch();
  indiClient->disconnect();
  indiClient->syncDispatch();

  // Check remove
  //indiClient->removeDeviceNewListener(& deviceNewHandler); // TODO: Does not work...
  indiClient->removeDeviceNewListener(connNew);
  //indiClient->removeDeviceRemovedListener(& deviceRemovedHandler); // TODO: Does not work...
  indiClient->removeDeviceRemovedListener(connRemoved);

  indiClient->connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  indiClient->syncDispatch();
  indiClient->disconnect();
  indiClient->syncDispatch();

  BOOST_CHECK_EQUAL(numDeviceNewHandlerCalls, 1);

  /**
   * NOTE: It turned out that disconnecting from the server does not automatically
   *       results in a property / device deletion. Therefore this handler is not
   *       called automatically. A "test-device" could be useful which can be used
   *       to fully test this feature.
   */
  //BOOST_CHECK_EQUAL(numDeviceRemovedHandlerCalls, 1);
}



BOOST_AUTO_TEST_CASE(add_remove_client_porperty_new_listener_test)
{
  // TODO: Why is normal on stack variant no longer possible????: IndiClientT indiClient(sHostname, sPort);
  //IndiClientT indiClient(sHostname, sPort);
  std::shared_ptr<IndiClientT> indiClient = std::make_shared<IndiClientT>(sHostname, sPort);
  
  bool driverInfoReceived = false;
  unsigned int numPropertyNewHandlerCalls = 0;
  
  auto propertyNewHandler = [& driverInfoReceived, & numPropertyNewHandlerCalls](INDI::Property * inProperty) {
    if (strcmp(inProperty->getDeviceName(), sTestDeviceName.c_str()) == 0 &&
	strcmp(inProperty->getName(), "DRIVER_INFO") == 0 &&
	inProperty->getType() == INDI_TEXT) {
      std::cerr << "SETTING driverInfoReceived to true!" << std::endl;
      driverInfoReceived = true;
      ++numPropertyNewHandlerCalls;
    }
  };

  boost::signals2::connection connNew = indiClient->addPropertyNewListener(propertyNewHandler);
  
  indiClient->connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  indiClient->syncDispatch();

  indiClient->disconnect();
  indiClient->syncDispatch();

  // Remove handler
  indiClient->removePropertyNewListener(connNew);

  indiClient->connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  indiClient->syncDispatch();
  indiClient->disconnect();
  indiClient->syncDispatch();

  BOOST_CHECK_EQUAL(driverInfoReceived, true);
  BOOST_CHECK_EQUAL(numPropertyNewHandlerCalls, 1);
}



BOOST_AUTO_TEST_CASE(add_remove_client_porperty_removed_listener_test)
{
  //TODO: Similar to add_remove_client_porperty_new_listener_test......
}



BOOST_AUTO_TEST_CASE(indi_client_new_indi_prop_to_vec_prop_test)
{
  IndiClientT indiClient(sHostname, sPort);
  
  auto propertyNewHandler = [& indiClient](INDI::Property * inProperty) {
    if (strcmp(inProperty->getDeviceName(), sTestDeviceName.c_str()) != 0 &&
	strcmp(inProperty->getName(), "DRIVER_INFO") != 0 &&
	inProperty->getType() == INDI_TEXT) {
      
      VecPropT<TextTraitsT> driverInfoVecProp(inProperty, nullptr);
      
      BOOST_CHECK_EQUAL(driverInfoVecProp.getDeviceName(), sTestDeviceName);
      BOOST_CHECK_EQUAL(driverInfoVecProp.getName(), "DRIVER_INFO");
      BOOST_CHECK_THROW(VecPropT<NumberTraitsT> prop(inProperty, nullptr), IncompatiblePropExcT);

      // Additional check
      BOOST_CHECK_EQUAL(indiPropTypeAsStr(inProperty->getType()), "INDI_TEXT");
    }
  };

  boost::signals2::connection connNew = indiClient.addPropertyNewListener(propertyNewHandler);
  
  indiClient.connect();
  sleep(sWaitForDevicesTimeSec); // Wait for devices
  indiClient.syncDispatch();

  indiClient.disconnect();
  indiClient.syncDispatch();
}



// BOOST_AUTO_TEST_CASE(add_remove_client_number_listener, * boost::unit_test::tolerance(0.00001)) {
//   IndiClientT indiClient(sHostname, sPort);

//   const float newNumber = 123.4;
//   float receivedNumber = 0;
//   unsigned int counter = 0;
  
//   auto newNumberListener = [& receivedNumber, & counter](INumberVectorProperty * vecNumber) {    
//     VecPropT<NumberTraitsT> numVecProp(vecNumber, nullptr);

//     BOOST_CHECK_EQUAL(numVecProp.getName(), "MY_NUM_VEC");

//     receivedNumber = numVecProp.getProp("MY_NUM_VALUE").get();
//     ++counter;
//   };

//   // Add listener
//   boost::signals2::connection connNew = indiClient.addVecNumberListener(newNumberListener);
  
//   indiClient.connect();
//   sleep(sWaitForDevicesTimeSec); // Wait for devices
//   indiClient.syncDispatch();


//   // Sending a number to the test-device, which will be answered with the same number
//   // This should result in the number listener call.
//   auto testDevice = indiClient.getDevice(sTestDeviceName);

//   BOOST_CHECK(testDevice);

//   testDevice->connect();

//   sleep(sWaitForDevicePropsTimeSec); // Wait for device props


//   // TODO: Move parts from below to vec_prop_test? device_test?
//   VecPropT<NumberTraitsT> numVecProp = testDevice->getVecProp<NumberTraitsT>("MY_NUM_VEC");

//   BOOST_CHECK(numVecProp.isValid());

//   PropT<NumberTraitsT> numProp = numVecProp.getProp("MY_NUM_VALUE");
//   BOOST_CHECK(numProp.isValid());

  
//   // Send test
//   numProp.set_local(newNumber);
//   numVecProp.send();
//   sleep(sWaitForPingbackSec);
//   indiClient.syncDispatch();
//   BOOST_CHECK_EQUAL(receivedNumber, 2.0f * newNumber);


//   // Test set()
//   numProp.set(3.0 * newNumber);
//   sleep(sWaitForPingbackSec);
//   indiClient.syncDispatch();
//   BOOST_CHECK_EQUAL(receivedNumber, 2.0f * 3.0f * newNumber);

  
//   // inValid() checks...
//   VecPropT<NumberTraitsT> invalidNumVecProp = testDevice->getVecProp<NumberTraitsT>("MY_NUM_VEC_XXX");
//   BOOST_CHECK(! invalidNumVecProp.isValid());

//   PropT<NumberTraitsT> invalidNumProp = numVecProp.getProp("MY_NUM_VALUE_XXX");
//   BOOST_CHECK(! invalidNumProp.isValid());

//   BOOST_CHECK_THROW(invalidNumVecProp.getProp("MY_NUM_VALUE"), VecPropNotValidExcT);


//   // Remove listener
//   //indiClient.removeVecPropListener(newNumberListener); // TODO: connNew?
//   connNew.disconnect();
  
//   numProp.set(4.0 * newNumber);
//   sleep(sWaitForPingbackSec);
//   indiClient.syncDispatch();

//   BOOST_CHECK_EQUAL(counter, 2);
  
  
//   indiClient.disconnect();
//   indiClient.syncDispatch();
// }

// BOOST_AUTO_TEST_CASE(add_remove_client_blob_listener)
// {
//   // TODO: Good testcase? -> Need to test notification.--> need to get server to send an update... (or calling method -> make test a "friend")?...
  
//   // IDEA: Instantiate an IndiServer with a test-device (e.g. ccd_simulator) -> Write class for that (see KStars)...
//   //       Then instantiate two clients and connect to the same server...
//   //       Then register listeners etc.... and send from one client to the other...
// }

BOOST_AUTO_TEST_SUITE_END()
